@page "/GetNumberOfPlayer"
<style>
    body {
        font-family: 'Lilita One', cursive;
    }

    .container {
        padding-top: 20%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
</style>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lilita+One&display=swap" rel="stylesheet">

<div class="container">
    @switch (Game.nextTask)
    {
        case PlayTask.GetNumberOfPlayers:
            @*Get the number of players*@
            <h2 class="text-center mt-1">How many players?</h2>
            <div class="row mt-2">
                <input type="text" placeholder="Enter Number (2-8)"
                       @onchange="UpdateNumberOfPlayer" />
            </div>
            <div class="row mt-5">
                <button type="button" class="btn btn-primary"
                        @onclick="SetNumberOfPlayer">
                    Next
                </button>
            </div>
            <div class="row mt-5">
                <h2 style="color: red;">
                    @*If the input is invalid, alart is displayed*@
                    <strong>@DisplayAlart</strong>
                </h2>
            </div>
            break;

        case PlayTask.GetNames:
            @*Get the name of each player*@
            <h2 class="text-center mt-1 mb-4">Player Names</h2>
            @for (var i = 0; i < Game.players.Count; i++)
            {
                int playerIndex = i;
                Player player = Game.players[playerIndex];
                <div class="row mt-2">
                    <div class="col-sm-4">
                        <label for="playerInput@(playerIndex)">Player @(playerIndex + 1)</label>
                    </div>
                    <div class="col-sm-6">
                        <input type="text" placeholder="Enter Player@(playerIndex + 1)'s Name"
                               @bind-value="player.name" />
                    </div>
                </div>
            }

            <div class="row mt-5">
                <button type="button" class="btn btn-primary"
                        @onclick="SetNameOfPlayer">
                    Play
                </button>
            </div>
            <div class="row mt-5">
                <h2 style="color: red;">
                    @*If the input is invalid, alart is displayed*@
                    <strong>@DisplayAlart</strong>
                </h2>
            </div>



            break;
    }

</div>



@inject NavigationManager NavigationManager

@code {
    private string DisplayAlart = "";
    int players;

    /*Check whether the input is valid, if it is, it will be saved, if it is not, alart will be displayed
    *Is called by input box
    *Has one parameter which is the iinput
    *No return
    */
    private void UpdateNumberOfPlayer(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int result) == false
                || result < 2 || result > 8)
        {
            DisplayAlart = "Please enter a valid number of players.";
        }
        else
        {
            DisplayAlart = "";
            players = result;
        }

    }

    /*Create a match for the number of players and let the Game class perform the next task
    *Is called by button
    *No parameter passed
    *No return
    */
    private void SetNumberOfPlayer()
    {
        if (players > 1 && players < 9)
        {
            DisplayAlart = "";
            Game.numberOfPlayers = players;
            for(int i = 0; i < Game.numberOfPlayers; i++)
            {
                Game.AddPlayer("");
            }
            Game.DoNextTask();
        }
        else
        {
            DisplayAlart = "Please enter a valid number of players.";
        }

    }

    /*Set name of the each player or show alart informatiion
    *Is called by Play button
    *No parameter passed
    *No return
    */
    private void SetNameOfPlayer()
    {
        if(CheckName() == 1)
        {
            DisplayAlart = "The name cannot be empty.";
        }
        else if(CheckName() == 2)
        {
            DisplayAlart = "Players cannot have the same name.";
        }
        else
        {
            DisplayAlart = "";
            Game.bets = new int[players];

            for (int i = 0; i < Game.numberOfPlayers; i++)
            {
                Game.bets[i] = Game.defaultValueOfBet;
                Game.change = -Game.defaultValueOfBet;
                Game.UpdateChip(i, Game.change);
                Game.UpdatePot();
            }
            Game.DoNextTask();
            NavigationManager.NavigateTo("/Bet");

        }

    }

    /*Check that the player name input is valid
    *Is called by if condition check in SetNameOfPlayer function
    *No parameter passed
    *Can return a int to represent different situations
    */
    private int CheckName()
    {
        foreach (Player player in Game.players)
        {
            if (player.name == "")
            {

                return 1;
            }
            else if (Game.players.FindAll(p => p.name == player.name).Count > 1)
            {

                return 2;
            }
        }
        return 0;
    }
}
